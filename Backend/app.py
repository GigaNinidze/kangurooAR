from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import os
import asyncio
import time
from dotenv import load_dotenv
from mock_gemini_service import MockGeminiService as GeminiService
from elevenlabs_service import ElevenLabsService

# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend communication

# Initialize services
gemini_service = None
elevenlabs_service = None

def initialize_services():
    """Initialize AI services with API keys"""
    global gemini_service, elevenlabs_service
    
    try:
        # Initialize Gemini service
        gemini_api_key = os.getenv('GEMINI_API_KEY')
        if not gemini_api_key:
            raise ValueError("GEMINI_API_KEY not found in environment variables")
        
        gemini_service = GeminiService(gemini_api_key)
        
        # Initialize ElevenLabs service
        elevenlabs_api_key = os.getenv('ELEVENLABS_API_KEY')
        elevenlabs_voice_id = os.getenv('ELEVENLABS_VOICE_ID')
        
        if not elevenlabs_api_key:
            raise ValueError("ELEVENLABS_API_KEY not found in environment variables")
        
        elevenlabs_service = ElevenLabsService(elevenlabs_api_key, elevenlabs_voice_id)
        
        print("‚úÖ All services initialized successfully")
        
    except Exception as e:
        print(f"‚ùå Error initializing services: {e}")
        raise e

@app.route('/api/chat', methods=['POST'])
def chat():
    """
    Main chat endpoint that handles:
    1. User message ‚Üí Gemini ‚Üí Text response
    2. Text response ‚Üí ElevenLabs ‚Üí Audio file
    3. Return text + audio URL to frontend
    """
    start_time = time.time()
    
    try:
        data = request.get_json()
        user_message = data.get('message', '')
        
        if not user_message:
            return jsonify({'error': 'No message provided'}), 400
        
        print(f"ü§ñ Processing message: {user_message[:50]}...")
        
        # Run async functions in event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # Step 1: Generate AI response with Gemini
            print("üìù Generating AI response...")
            ai_response = loop.run_until_complete(gemini_service.generate_response(user_message))
            print(f"‚úÖ AI Response: {ai_response}")
            
            # Step 2: Generate audio with ElevenLabs
            print("üéµ Generating audio...")
            audio_url = loop.run_until_complete(elevenlabs_service.generate_audio(ai_response))
            print(f"‚úÖ Audio generated: {audio_url}")
            
        finally:
            loop.close()
        
        # Calculate total response time
        total_time = (time.time() - start_time) * 1000
        print(f"‚è±Ô∏è Total response time: {total_time:.3f}ms")
        
        # Return response to frontend
        return jsonify({
            'text': ai_response,
            'audioUrl': audio_url,
            'visemes': []  # Will be generated by frontend using wawa-lipsync
        })
        
    except Exception as e:
        print(f"‚ùå Error in chat endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/static/audio/<filename>')
def serve_audio(filename):
    """Serve audio files to frontend"""
    return send_from_directory('static/audio', filename)

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    # Initialize services on startup
    try:
        initialize_services()
    except Exception as e:
        print(f"Failed to initialize services: {e}")
        exit(1)
    
    port = int(os.environ.get('PORT', 3001))
    print(f"üöÄ Starting server on http://localhost:{port}")
    app.run(host='0.0.0.0', port=port, debug=True)
